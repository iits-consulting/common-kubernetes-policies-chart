{{ with .Values.customPolicies.replaceImageRegistry }}
{{ if .enabled }}
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: replace-image-registry
  annotations:
    policies.kyverno.io/title: Replace Image Registry
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Sample
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    kyverno.io/kyverno-version: 1.7.2
    policies.kyverno.io/minversion: 1.6.0
    kyverno.io/kubernetes-version: "1.23"
    policies.kyverno.io/description: >-
      We rewrite every third party docker registry to `{{.target}}`.
      If the image does not exist there it can not be deployed.

      Since we have also business apps you can also exclude registries from the replacement.

      The pulls are directed to a approved registry. In some cases, those registries may function as
      pull-through proxies and can fetch the image if not cached.
      This policy mutates all images either in the form 'image:tag' or
      'registry.corp.com/image:tag' to be `{{.target}}image:tag`.
      Note that this mutates Pods directly and not their controllers. It can be changed if desired but
      if so may need to not match on Pods.
spec:
  background: {{.background}}
  validationFailureAction: {{.validationFailureAction}}
  rules:
    - name: replace-image-registry-pod-containers
      preconditions:
        all:
          {{- range $excludeRegistry := .excludeRegistries}}
          - key: "{{`{{request.object.spec.containers[0].image || ''}}`}}"
            operator: NotEquals
            value: "{{$excludeRegistry}}"
          - key: "{{`{{request.object.spec.containers[1].image || ''}}`}}"
            operator: NotEquals
            value: "{{$excludeRegistry}}"
          - key: "{{`{{request.object.spec.containers[2].image || ''}}`}}"
            operator: NotEquals
            value: "{{$excludeRegistry}}"
          {{- end }}
      match:
        any:
          - resources:
              kinds:
                - Pod
      mutate:
        foreach:
          - list: "request.object.spec.containers"
            patchStrategicMerge:
              spec:
                containers:
                  - name: "{{`{{ element.name }}`}}"
                    image: "{{`{{ regex_replace_all_literal(`}}{{.sourceRegex}}, {{`'{{element.image}}', `}}'{{.target}}'{{` )}}`}}"
    - name: replace-image-registry-pod-initcontainers
      match:
        any:
          - resources:
              kinds:
                - Pod
      preconditions:
        all:
          - key: "{{`{{ request.object.spec.initContainers[] || `}}`[]`{{` | length(@) }}`}}"
            operator: GreaterThanOrEquals
            value: 1
      mutate:
        foreach:
          - list: "request.object.spec.initContainers"
            patchStrategicMerge:
              spec:
                initContainers:
                  - name: "{{`{{ element.name }}`}}"
                    image: "{{`{{ regex_replace_all_literal(`}}{{.sourceRegex}}, {{`'{{element.image}}', `}}'{{.target}}'{{` )}}`}}"
{{ end }}
{{ end }}